---
description: Component Design Patterns with Chakra UI
alwaysApply: true
---

# Component Design Patterns

This document defines the architectural standards for creating React components using Chakra UI, Lucide, and TailwindCSS, ensuring consistency, maintainability, and quality.

## üèóÔ∏è Core Philosophy: Atomic & Composable

Our architecture follows Atomic Design principles with Chakra UI as the foundation. Components should be small, single-purpose, and composable.

- **Composition over Inheritance**: Build complex UIs by combining Chakra UI components.
- **Single Responsibility**: Each component should do one thing well.
- **Chakra UI First**: Use Chakra UI components as the primary building blocks with its theme system.
- **Styled System Integration**: Leverage Chakra UI's style props and theme tokens for consistent design.
- **TailwindCSS as Complement**: Use Tailwind utilities only when Chakra UI styling is insufficient.
- **Lucide Icons**: Use Lucide React for all iconography needs.

## üìÅ File & Folder Structure

A clear, standardized structure is mandatory for all components. Each component must exist within its own folder.

```
src/
‚îî‚îÄ‚îÄ components/
    ‚îî‚îÄ‚îÄ ui/
        ‚îî‚îÄ‚îÄ Button/
            ‚îú‚îÄ‚îÄ index.tsx           # Component logic and JSX
            ‚îú‚îÄ‚îÄ button.types.ts     # TypeScript interfaces and types
            ‚îú‚îÄ‚îÄ button.theme.ts     # Chakra UI theme variants (optional)
            ‚îî‚îÄ‚îÄ button.stories.tsx  # Storybook stories (optional)
```

- **`ui/`**: Contains base, reusable UI components that extend or compose Chakra UI components.
- **`layout/`**: Components for page structure (containers, headers, sidebars).
- **`feature/`**: Folders for components belonging to specific business features.
- **`forms/`**: Form-specific components and field compositions.

### File Naming Convention

- **Component Logic**: `index.tsx`
- **Types**: `[component-name].types.ts`
- **Theme Variants**: `[component-name].theme.ts` (for custom Chakra theme extensions)
- **Stories**: `[component-name].stories.tsx` (for Storybook documentation)

## üéØ Component Implementation Pattern (with Chakra UI)

This pattern demonstrates how to create components using Chakra UI's system, with a `Button` as the primary example. We leverage Chakra's styled system, theme tokens, and component composition.

### Step 1: Define Theme Variants (`button.theme.ts`) - Optional

For complex components that need custom theme variants, define them here. This extends Chakra UI's theme system.

```typescript
// src/components/ui/button/button.theme.ts
import { defineStyle, defineStyleConfig } from '@chakra-ui/react';

const gradient = defineStyle({
  background: 'linear-gradient(135deg, blue.400, purple.500)',
  color: 'white',
  _hover: {
    background: 'linear-gradient(135deg, blue.500, purple.600)',
    transform: 'translateY(-2px)',
  },
  _active: {
    transform: 'translateY(0)',
  },
  transition: 'all 0.2s',
});

const glass = defineStyle({
  background: 'rgba(255, 255, 255, 0.1)',
  backdropFilter: 'blur(10px)',
  border: '1px solid',
  borderColor: 'rgba(255, 255, 255, 0.2)',
  color: 'white',
  _hover: {
    background: 'rgba(255, 255, 255, 0.2)',
  },
});

export const buttonTheme = defineStyleConfig({
  variants: {
    gradient,
    glass,
  },
});
```

### Step 2: Define Types (`button.types.ts`)

The component's props interface extends Chakra UI's Button props and adds custom properties.

```typescript
// src/components/ui/button/button.types.ts
import type { ButtonProps as ChakraButtonProps } from '@chakra-ui/react';
import type { LucideIcon } from 'lucide-react';

export interface ButtonProps extends ChakraButtonProps {
  /** Loading state with spinner */
  isLoading?: boolean;
  /** Icon from Lucide React */
  icon?: LucideIcon;
  /** Icon position */
  iconPosition?: 'left' | 'right';
  /** Custom variant (extends Chakra's built-in variants) */
  variant?: ChakraButtonProps['variant'] | 'gradient' | 'glass';
  /** Tooltip text */
  tooltip?: string;
  /** Full width button */
  fullWidth?: boolean;
}
```

### Step 3: Implement Component Logic (`index.tsx`)

The main component implementation uses Chakra UI's Button with enhanced functionality.

```typescript
// src/components/ui/button/index.tsx
import React from 'react';
import {
  Button as ChakraButton,
  Tooltip,
  Spinner,
  Icon,
  forwardRef
} from '@chakra-ui/react';
import type { ButtonProps } from './button.types';

const Button = forwardRef<ButtonProps, 'button'>(
  ({
    children,
    isLoading,
    icon,
    iconPosition = 'left',
    tooltip,
    fullWidth,
    disabled,
    ...props
  }, ref) => {
    const IconComponent = icon ? <Icon as={icon} /> : null;

    const buttonContent = (
      <>
        {isLoading && <Spinner size="sm" mr={2} />}
        {!isLoading && IconComponent && iconPosition === 'left' && (
          <Icon as={icon} mr={2} />
        )}
        {children}
        {!isLoading && IconComponent && iconPosition === 'right' && (
          <Icon as={icon} ml={2} />
        )}
      </>
    );

    const button = (
      <ChakraButton
        ref={ref}
        isLoading={isLoading}
        isDisabled={disabled || isLoading}
        width={fullWidth ? 'full' : undefined}
        {...props}
      >
        {buttonContent}
      </ChakraButton>
    );

    if (tooltip) {
      return (
        <Tooltip label={tooltip} hasArrow>
          {button}
        </Tooltip>
      );
    }

    return button;
  }
);

Button.displayName = 'Button';

export { Button };
export type { ButtonProps };
```

## üìã Component Development Checklist

- [ ] **Can it be built from existing Chakra UI components?**
- [ ] **Is it in its own folder (`Button/`)?**
- [ ] **Are custom theme variants in a separate `*.theme.ts` file?**
- [ ] **Are all types in a separate `*.types.ts` file?**
- [ ] **Does it handle states like `isLoading`, `isDisabled`, `isInvalid`?**
- [ ] **Does it use Chakra UI's style props and theme tokens?**
- [ ] **Are Lucide icons used for all iconography?**
- [ ] **Is it responsive using Chakra UI's responsive array syntax?**
- [ ] **Does it follow Chakra UI's accessibility patterns?**
- [ ] **Are TypeScript types properly exported?**
- [ ] **Does it forward refs correctly using Chakra's `forwardRef`?**

## üé® Styling Guidelines

### Use Chakra UI Style Props First
```typescript
// ‚úÖ Good: Chakra UI style props
<Box p={4} bg="gray.100" borderRadius="md" _hover={{ bg: "gray.200" }}>
  Content
</Box>

// ‚ùå Avoid: Direct CSS classes when Chakra props are available
<div className="p-4 bg-gray-100 rounded-md hover:bg-gray-200">
  Content
</div>
```

### Leverage Theme Tokens
```typescript
// ‚úÖ Good: Using theme tokens
<Text fontSize="lg" color="brand.500" fontWeight="semibold">
  Heading
</Text>

// ‚ùå Avoid: Hardcoded values
<Text fontSize="18px" color="#3182CE" fontWeight={600}>
  Heading
</Text>
```

### Responsive Design with Arrays
```typescript
// ‚úÖ Good: Responsive arrays
<Box
  width={['full', 'md', 'lg']}
  p={[4, 6, 8]}
  fontSize={['sm', 'md', 'lg']}
>
  Responsive content
</Box>
```

### TailwindCSS Integration (When Needed)
Use TailwindCSS only for:
- Complex animations not available in Chakra UI
- Grid layouts that are simpler with Tailwind
- Specific utility classes not covered by Chakra

```typescript
// ‚úÖ Good: Chakra + Tailwind combination
<Box className="animate-pulse" bg="gray.100" p={4}>
  <Text>Loading with custom animation</Text>
</Box>
```

## üîß Common Patterns

### Icon Integration with Lucide
```typescript
import { Search, ChevronDown } from 'lucide-react';

// ‚úÖ Good: Proper icon integration
<Button leftIcon={<Search />} rightIcon={<ChevronDown />}>
  Search & Filter
</Button>
```

### Form Controls
```typescript
// ‚úÖ Good: Chakra form patterns
<FormControl isInvalid={!!error} isRequired>
  <FormLabel>Email</FormLabel>
  <Input type="email" value={value} onChange={onChange} />
  <FormErrorMessage>{error}</FormErrorMessage>
</FormControl>
```

### Loading States
```typescript
// ‚úÖ Good: Chakra loading patterns
<Button isLoading loadingText="Submitting...">
  Submit
</Button>

<Skeleton isLoaded={!loading} height={20}>
  <Text>Content that loads</Text>
</Skeleton>
```
