---
description: Authentication & Company Management Patterns
alwaysApply: true
---

# Authentication & Company Management Patterns

## Authentication Flow

### Simple JWT Authentication
```typescript
// src/controllers/AuthController.ts
export default class AuthController {
    static login = (credentials: LoginRequest): Promise<AuthResponse> =>
        new Promise((resolve, reject) => {
            axiosWebservice
                .post('/v4/auth/login', credentials)
                .then(({ data }) => {
                    StorageManager.setToken(data.token);
                    resolve(data);
                })
                .catch(reject);
        });

    static register = (companyData: RegisterRequest): Promise<AuthResponse> =>
        new Promise((resolve, reject) => {
            axiosWebservice
                .post('/v4/auth/register', companyData)
                .then(({ data }) => resolve(data))
                .catch(reject);
        });
}
```

### Authentication Context
```typescript
// src/hooks/useAuth.ts
interface AuthContextType {
    user: User | null;
    company: Company | null;
    role: UserRole;
    isAuthenticated: boolean;
    login: (credentials: LoginRequest) => Promise<void>;
    logout: () => void;
    updateCompany: (updates: CompanyUpdates) => Promise<void>;
}

export const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) {
        throw new Error('useAuth must be used within AuthProvider');
    }
    return context;
};
```

## Company Management (Whitelabel)

### Company Settings Form
```typescript
// src/components/auth/CompanySettings.tsx
interface CompanySettingsProps {
    company: Company;
    onUpdate: (updates: CompanyUpdates) => void;
}

const CompanySettings: React.FC<CompanySettingsProps> = ({ company, onUpdate }) => {
    const [logo, setLogo] = useState<File | null>(null);
    const [primaryColor, setPrimaryColor] = useState(company.primaryColor);
    
    return (
        <form onSubmit={handleSubmit}>
            <div className="space-y-6">
                <LogoUploader 
                    currentLogo={company.logoUrl}
                    onLogoChange={setLogo}
                />
                <ColorPicker
                    value={primaryColor}
                    onChange={setPrimaryColor}
                    label="Primary Brand Color"
                />
                <Input
                    label="Company Name"
                    value={company.name}
                    onChange={(value) => setCompanyData({...companyData, name: value})}
                />
            </div>
        </form>
    );
};
```

## Role-Based Access Control

### User Roles
```typescript
// src/types/auth.types.ts
export enum UserRole {
    ADMIN = 'admin',        // Full access
    OPERATOR = 'operator',  // Can manage subjects, agents, calls
    VIEWER = 'viewer'       // Read-only access
}

export interface User {
    id: string;
    name: string;
    email: string;
    role: UserRole;
    companyId: string;
}

export interface Company {
    id: string;
    name: string;
    logoUrl?: string;
    primaryColor: string;
    secondaryColor?: string;
}
```

### Permission Hook
```typescript
// src/hooks/usePermissions.ts
export const usePermissions = () => {
    const { user } = useAuth();
    
    return {
        canManageUsers: user?.role === UserRole.ADMIN,
        canManageAgents: [UserRole.ADMIN, UserRole.OPERATOR].includes(user?.role),
        canManageSubjects: [UserRole.ADMIN, UserRole.OPERATOR].includes(user?.role),
        canInitiateCalls: [UserRole.ADMIN, UserRole.OPERATOR].includes(user?.role),
        canViewAnalytics: true, // All roles can view
    };
};
```

### Protected Route Component
```typescript
// src/components/auth/ProtectedRoute.tsx
interface ProtectedRouteProps {
    children: React.ReactNode;
    requiredRole?: UserRole;
    requiredPermission?: keyof ReturnType<typeof usePermissions>;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ 
    children, 
    requiredRole,
    requiredPermission 
}) => {
    const { isAuthenticated, user } = useAuth();
    const permissions = usePermissions();
    
    if (!isAuthenticated) {
        return <LoginForm />;
    }
    
    if (requiredRole && user?.role !== requiredRole) {
        return <AccessDenied />;
    }
    
    if (requiredPermission && !permissions[requiredPermission]) {
        return <AccessDenied />;
    }
    
    return <>{children}</>;
};
```

## Login Form Pattern

### Modern Login Form
```typescript
// src/components/auth/LoginForm.tsx
const LoginForm: React.FC = () => {
    const { login } = useAuth();
    const { execute: submitLogin, loading, error } = useApiState(AuthController.login);
    
    const form = useForm<LoginRequest>({
        defaultValues: { email: '', password: '' }
    });
    
    const onSubmit = async (data: LoginRequest) => {
        try {
            await submitLogin(data);
            // Navigation handled by auth context
        } catch (err) {
            // Error handled by useApiState
        }
    };
    
    return (
        <Card className="w-full max-w-md mx-auto">
            <CardHeader>
                <CardTitle>Sign In</CardTitle>
            </CardHeader>
            <CardContent>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                    <FormField
                        control={form.control}
                        name="email"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Email</FormLabel>
                                <FormControl>
                                    <Input type="email" {...field} />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                    
                    <FormField
                        control={form.control}
                        name="password"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Password</FormLabel>
                                <FormControl>
                                    <Input type="password" {...field} />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                    
                    {error && (
                        <Alert variant="destructive">
                            <AlertDescription>{error}</AlertDescription>
                        </Alert>
                    )}
                    
                    <Button type="submit" className="w-full" disabled={loading}>
                        {loading ? 'Signing in...' : 'Sign In'}
                    </Button>
                </form>
            </CardContent>
        </Card>
    );
};
```

## Storage Management

### Token Storage
```typescript
// src/classes/StorageManager.ts
export default class StorageManager {
    private static readonly TOKEN_KEY = 'sdr_auth_token';
    private static readonly COMPANY_KEY = 'sdr_company_data';
    
    static setToken(token: string): void {
        localStorage.setItem(this.TOKEN_KEY, token);
    }
    
    static getToken(): string | null {
        return localStorage.getItem(this.TOKEN_KEY);
    }
    
    static removeToken(): void {
        localStorage.removeItem(this.TOKEN_KEY);
    }
    
    static setCompanyData(company: Company): void {
        localStorage.setItem(this.COMPANY_KEY, JSON.stringify(company));
    }
    
    static getCompanyData(): Company | null {
        const data = localStorage.getItem(this.COMPANY_KEY);
        return data ? JSON.parse(data) : null;
    }
}
```