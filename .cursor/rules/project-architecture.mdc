---
description: Project Architecture - Voice AI Platform
alwaysApply: true
---

# Project Architecture - Voice AI Platform

## File Structure (Voice AI Platform)

```
src/
â”œâ”€â”€ components/           # UI components organized by domain
â”‚   â”œâ”€â”€ auth/                         # Authentication components
â”‚   â”‚   â”œâ”€â”€ LoginForm.tsx
â”‚   â”‚   â””â”€â”€ CompanySettings.tsx
â”‚   â”œâ”€â”€ subjects/                     # Subject management
â”‚   â”‚   â”œâ”€â”€ SubjectForm.tsx
â”‚   â”‚   â”œâ”€â”€ SubjectTable.tsx
â”‚   â”‚   â”œâ”€â”€ BulkImport.tsx
â”‚   â”‚   â””â”€â”€ SubjectFilters.tsx
â”‚   â”œâ”€â”€ agents/                       # Agent configuration
â”‚   â”‚   â”œâ”€â”€ AgentForm.tsx
â”‚   â”‚   â”œâ”€â”€ AgentTable.tsx
â”‚   â”‚   â”œâ”€â”€ PersonalitySelector.tsx
â”‚   â”‚   â”œâ”€â”€ VoiceSelector.tsx
â”‚   â”‚   â””â”€â”€ StepManager/
â”‚   â”‚       â”œâ”€â”€ StepManager.tsx
â”‚   â”‚       â”œâ”€â”€ StepForm.tsx
â”‚   â”‚       â””â”€â”€ StepReorder.tsx
â”‚   â”œâ”€â”€ calls/                        # Call operations
â”‚   â”‚   â”œâ”€â”€ CallManager.tsx
â”‚   â”‚   â”œâ”€â”€ CallScheduler.tsx
â”‚   â”‚   â”œâ”€â”€ CallHistory.tsx
â”‚   â”‚   â””â”€â”€ LiveCallMonitor.tsx
â”‚   â”œâ”€â”€ analytics/                    # Analytics & reporting
â”‚   â”‚   â”œâ”€â”€ Dashboard.tsx
â”‚   â”‚   â”œâ”€â”€ ConversationHistory.tsx
â”‚   â”‚   â”œâ”€â”€ MetricsCards.tsx
â”‚   â”‚   â””â”€â”€ Charts/
â”‚   â”‚       â”œâ”€â”€ CallVolumeChart.tsx
â”‚   â”‚       â””â”€â”€ SuccessRateChart.tsx
â”‚   â”œâ”€â”€ whitelabel/                   # Branding customization
â”‚   â”‚   â”œâ”€â”€ ThemeProvider.tsx
â”‚   â”‚   â”œâ”€â”€ LogoUploader.tsx
â”‚   â”‚   â””â”€â”€ ColorPicker.tsx
â”‚   â””â”€â”€ ui/                           # Reusable UI primitives (Radix UI)
â”‚       â”œâ”€â”€ button/
â”‚       â”œâ”€â”€ dialog/
â”‚       â”œâ”€â”€ form/
â”‚       â”œâ”€â”€ data-table/
â”‚       â”œâ”€â”€ file-upload/
â”‚       â””â”€â”€ charts/
â”œâ”€â”€ controllers/          # API integration layer
â”‚   â”œâ”€â”€ AuthController.ts             # Authentication & company management
â”‚   â”œâ”€â”€ SubjectController.ts          # Subject CRUD operations
â”‚   â”œâ”€â”€ AgentController.ts            # Agent configuration
â”‚   â”œâ”€â”€ CallController.ts             # Call operations & scheduling
â”‚   â””â”€â”€ AnalyticsController.ts        # Analytics & reporting
â”œâ”€â”€ hooks/               # Custom React hooks
â”‚   â”œâ”€â”€ useApiState.ts                # Generic API state management
â”‚   â”œâ”€â”€ useWhitelabel.ts              # Theming & branding
â”‚   â”œâ”€â”€ useSubjects.ts                # Subject management
â”‚   â”œâ”€â”€ useAgents.ts                  # Agent configuration
â”‚   â””â”€â”€ useCallHistory.ts             # Call analytics
â”œâ”€â”€ lib/                 # External integrations
â”‚   â”œâ”€â”€ axios-webservice.ts           # Axios configuration
â”‚   â”œâ”€â”€ theme.ts                      # Theme utilities
â”‚   â””â”€â”€ utils.ts                      # General utilities
â”œâ”€â”€ classes/             # Utility classes
â”‚   â”œâ”€â”€ StorageManager.ts             # Local storage management
â”‚   â””â”€â”€ CSVParser.ts                  # CSV import/export
â”œâ”€â”€ types/               # TypeScript definitions
â”‚   â”œâ”€â”€ index.ts                      # All type definitions
â”‚   â”œâ”€â”€ auth.types.ts                 # Authentication types
â”‚   â”œâ”€â”€ subject.types.ts              # Subject types
â”‚   â”œâ”€â”€ agent.types.ts                # Agent types
â”‚   â”œâ”€â”€ call.types.ts                 # Call types
â”‚   â”œâ”€â”€ analytics.types.ts            # Analytics types
â”‚   â””â”€â”€ env.d.ts                      # Environment variables
â”œâ”€â”€ utils/               # Utility functions
â”‚   â”œâ”€â”€ Routes.ts                     # URL/routing utilities
â”‚   â”œâ”€â”€ formatters.ts                 # Data formatting utilities
â”‚   â””â”€â”€ validators.ts                 # Form validation utilities
â”œâ”€â”€ App.tsx              # Main app component
â””â”€â”€ main.tsx             # App entry point
```

## Architecture Principles

### 1. Domain-Driven Structure

- **Feature-based organization**: Components grouped by domain (auth, subjects, agents, calls, analytics).
- **Whitelabel ready**: All components support theming and customization.
- **Scalable architecture**: Easy to extend with new features and modules.
- **Single responsibility**: Each component has one clear purpose within its domain.

### 2. Modern Stack

- **React 19 + TypeScript**: Type safety and modern features.
- **Vite**: Fast development and build process.
- **Shadcn UI + Tailwind**: Accessible, customizable UI with excellent data table support.
- **React Context**: For whitelabel theming and company-wide state.

### 3. Clear Separation of Concerns

- **Components**: Domain-specific UI logic organized by feature.
- **Hooks**: Reusable stateful logic for data fetching and management.
- **Controllers**: API communication layer for each domain.
- **Types**: Strongly typed interfaces for all domains.
- **Libs/Utils**: External integrations, formatting, and validation helpers.

### 4. Data Management Focus

- **Bulk operations**: Efficient handling of large datasets (subjects, calls).
- **Real-time updates**: Live call monitoring and analytics.
- **Export/Import**: CSV support for subject management.
- **Filtering & Search**: Advanced filtering for all data tables.

## Naming Conventions

### Files and Folders

- **Components**: `PascalCase` (e.g., `FaceLivenessModal.tsx`).
- **Hooks**: `useCamelCase` (e.g., `useApiState.ts`).
- **Controllers**: `PascalCase` with `Controller` suffix (e.g., `AuthController.ts`).
- **Utilities**: `camelCase` (e.g., `routes.ts`).
- **Types**: `PascalCase` for interfaces/types (e.g., `LoginResponse`).

### Code

- **Variables/Functions**: `camelCase`.
- **Constants**: `UPPER_CASE_SNAKE` (e.g., `API_TIMEOUT`).
- **React Components**: `PascalCase`.
- **CSS Classes (Tailwind)**: `utility-first` (e.g., `flex items-center justify-center`).

## Component Design Priority

1.  **ðŸ¥‡ Shadcn UI + Tailwind CSS (Primary)**: Build accessible, unstyled components with Shadcn UI and style them with Tailwind.
2.  **ðŸ¥ˆ Custom Components (Secondary)**: If Shadcn UI doesn't provide a primitive, build a custom component following the same accessibility and composition principles.
3.  **ðŸ¥‰ Third-Party Libraries (Last Resort)**: Only use if a complex component is absolutely necessary and building it from scratch is not feasible.

## State Management

### Local State (`useState`, `useReducer`)

- **Default choice**: Use for all component-level state. This should cover most use cases.
- **Example**: Form state, modal visibility.

```typescript
const [formData, setFormData] = useState({ email: '', password: '' });
const [isModalOpen, setIsModalOpen] = useState(false);
```

### Shared State (`useContext`)

- **Use case**: For state that needs to be shared across a component tree without prop drilling.
- **Keep it simple**: Use context for low-frequency updates. Avoid using it for rapidly changing data.
- **Principle**: Only introduce shared state when `useState` is not sufficient.

```typescript
// Example with React Context
import { createContext, useContext, useState, useMemo } from 'react';

interface AuthContextType {
isAuthenticated: boolean;
user: User | null;
login: (user: User) => void;
logout: () => void;
}

const AuthContext = createContext<AuthContextType | null>(null);

export const AuthProvider = ({ children }) => {
const [user, setUser] = useState<User | null>(null);

    const login = (userData: User) => setUser(userData);
    const logout = () => setUser(null);

    const value = useMemo(() => ({
        isAuthenticated: !!user,
        user,
        login,
        logout,
    }), [user]);

    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );

};

export const useAuth = () => {
const context = useContext(AuthContext);
if (!context) {
throw new Error('useAuth must be used within an AuthProvider');
}
return context;
};
```

## Environment Configuration

### Vite Environment Variables

- **File**: `.env.local` for local development (do not commit).
- **Access**: `import.meta.env.VARIABLE_NAME`.

```

# .env

# API Configuration
VITE_API_BASE_URL="http://localhost:8080/api"

# Voice AI Services
VITE_VOICE_SERVICE_URL="https://voice-ai-api.example.com"
VITE_LLM_SERVICE_URL="https://llm-api.example.com"

# File Upload
VITE_MAX_FILE_SIZE_MB=10
VITE_ALLOWED_FILE_TYPES="csv,xlsx"

# Real-time Features
VITE_WEBSOCKET_URL="ws://localhost:8080/ws"

# Analytics
VITE_ANALYTICS_ENABLED=true
```

## Key Functional Modules

Based on the hackathon requirements, the platform implements these core modules:

### 1. Authentication & Company Management (RF-EMPRESA)
- User registration and login
- Company profile management (logo, colors, whitelabel)
- Role-based access control (Admin, Operator, Visualizer)

### 2. Subject Management (RF-SUJEITO)
- Manual subject registration (name, phone)
- Bulk CSV import/export
- Subject listing, editing, and deletion
- Advanced filtering and search

### 3. Agent Configuration (RF-AGENTE)
- Agent creation with objectives
- Personality selection (Friendly, Formal, Persuasive)
- Voice selection (Male, Female options)
- Conversation flow step management (1-10 steps)
- Step reordering and deletion

### 4. Call Operations (RF-CALL)
- Individual call initiation
- Bulk call scheduling
- Live call monitoring
- Call status tracking

### 5. Analytics & Reporting (RF-ANALISE)
- Conversation history and transcriptions
- Success metrics and KPIs
- Sentiment analysis integration
- Performance dashboards
- Step-by-step analysis
